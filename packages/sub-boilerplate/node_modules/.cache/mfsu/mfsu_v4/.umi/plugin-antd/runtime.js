import React from "react";
import {
  Modal,
  ConfigProvider,
  App,
  message,
  notification,
  theme
} from "antd";
import { ApplyPluginsType } from "umi";
import {
  StyleProvider,
  legacyLogicalPropertiesTransformer
} from "/home/khangduong/Workspaces/CoreProject/Frondend/micro-frondend/packages/sub-boilerplate/node_modules/@ant-design/cssinjs";
import { getPluginManager } from "../core/plugin";
let cacheAntdConfig = null;
const getAntdConfig = () => {
  if (!cacheAntdConfig) {
    cacheAntdConfig = getPluginManager().applyPlugins({
      key: "antd",
      type: ApplyPluginsType.modify,
      initialValue: {
        ...{ "theme": { "token": { "colorPrimary": "#1677ff", "colorInfo": "#1677ff", "borderRadius": 2 } } },
        appConfig: {}
      }
    });
  }
  return cacheAntdConfig;
};
export function rootContainer(rawContainer) {
  const {
    appConfig,
    ...finalConfigProvider
  } = getAntdConfig();
  let container = rawContainer;
  if (finalConfigProvider.prefixCls) {
    Modal.config({
      rootPrefixCls: finalConfigProvider.prefixCls
    });
    message.config({
      prefixCls: `${finalConfigProvider.prefixCls}-message`
    });
    notification.config({
      prefixCls: `${finalConfigProvider.prefixCls}-notification`
    });
  }
  if (finalConfigProvider.iconPrefixCls) {
    ConfigProvider.config({
      iconPrefixCls: finalConfigProvider.iconPrefixCls
    });
  }
  ;
  if (finalConfigProvider.theme) {
    ConfigProvider.config({
      theme: finalConfigProvider.theme
    });
  }
  container = /* @__PURE__ */ React.createElement(ConfigProvider, { ...finalConfigProvider }, container);
  container = /* @__PURE__ */ React.createElement(
    ConfigProvider,
    {
      theme: {
        algorithm: [
          theme.compactAlgorithm
        ]
      }
    },
    container
  );
  container = /* @__PURE__ */ React.createElement(
    StyleProvider,
    {
      hashPriority: "high",
      transformers: [legacyLogicalPropertiesTransformer]
    },
    container
  );
  return container;
}
export function innerProvider(container) {
  const {
    appConfig: finalAppConfig = {}
  } = getAntdConfig();
  return /* @__PURE__ */ React.createElement(App, { ...finalAppConfig }, container);
}
