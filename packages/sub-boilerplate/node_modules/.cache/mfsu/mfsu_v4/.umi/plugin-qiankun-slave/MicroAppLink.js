import { useModel } from "@@/plugin-model";
import React, {
  forwardRef,
  useImperativeHandle,
  useRef,
  useCallback
} from "react";
import noop from "/home/khangduong/Workspaces/CoreProject/Frondend/micro-frondend/packages/sub-boilerplate/node_modules/lodash/noop";
import find from "/home/khangduong/Workspaces/CoreProject/Frondend/micro-frondend/packages/sub-boilerplate/node_modules/lodash/find";
import {
  qiankunStateFromMasterModelNamespace
} from "./constants";
const COMPONENT_NAME = "qiankun-microapp-link";
const urlFactory = (base, routes) => ({ name, to, isMaster }) => {
  if (isMaster) {
    return to;
  }
  if (!to?.startsWith("/")) {
    throw new Error(`[${COMPONENT_NAME}] props "to" should start with "/"`);
  }
  const app = find(routes, ({ microApp }) => microApp === name);
  if (!app) {
    console.error(`[${COMPONENT_NAME}] microapp "${name}" is not found`);
    return to;
  }
  const prefix = base === "/" ? app.path.replace("/*", "") : `${base}${app.path.replace("/*", "")}`;
  return `${prefix}${to}`;
};
export const MicroAppLink = forwardRef((props, ref) => {
  const { children, name, to, isMaster = false, ...anchorProps } = props;
  const stateFromMaster = (useModel || noop)(
    qiankunStateFromMasterModelNamespace
  );
  const linkRef = useRef();
  const {
    masterHistoryType,
    microAppRoutes,
    base,
    appNameKeyAlias = "name"
  } = stateFromMaster?.__globalRoutesInfo || {};
  const appName = name && props[appNameKeyAlias] ? name : props[appNameKeyAlias] || name;
  const linkProps = { name: appName, to, isMaster };
  const createHerf = urlFactory(base, microAppRoutes);
  const linkUrl = masterHistoryType === "browser" ? createHerf(linkProps) : `#${createHerf(linkProps)}`;
  useImperativeHandle(ref, () => linkRef.current);
  const handleClick = useCallback(
    (e) => {
      if (anchorProps.onClick) {
        return anchorProps.onClick(e);
      }
      if (masterHistoryType === "hash") {
        return;
      }
      if (masterHistoryType === "browser") {
        e?.stopPropagation();
        e?.preventDefault();
        return window.history.pushState({}, "", linkUrl);
      }
      console.error(
        `[${COMPONENT_NAME}] not support "masterHistoryType = '${masterHistoryType}'"`
      );
      return;
    },
    [anchorProps.onClick, masterHistoryType]
  );
  return /* @__PURE__ */ React.createElement(
    "a",
    {
      ...anchorProps,
      ref: linkRef,
      className: `${COMPONENT_NAME} ${anchorProps.className}`,
      href: linkUrl,
      onClick: handleClick
    },
    children
  );
});
